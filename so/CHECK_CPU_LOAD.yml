---
- name: Verificar carga da CPU e identificar ofensores
  hosts: all
  gather_facts: true
  vars:
    load_threshold: 2.00
    trace: ""
    status: "UNKNOWN"
    categoria: ""
    mensagem: ""
    processo_disponivel: false

  tasks:

    - name: "[TRACE] Início do playbook"
      set_fact:
        trace: "{{ trace }} Início do playbook |"

    - name: Tentar obter load_average dos facts
      set_fact:
        load_average: "{{ ansible_facts.ansible_loadavg['1m'] | float }}"
      when: ansible_facts.ansible_loadavg is defined

    - name: Fallback - obter load average via uptime
      when: ansible_facts.ansible_loadavg is not defined
      block:
        - name: Executar uptime
          ansible.builtin.shell: uptime
          register: uptime_output
          changed_when: false

        - name: Extrair valor do load average de 1 minuto
          set_fact:
            load_average: "{{ (uptime_output.stdout | regex_findall('[0-9]+\\.[0-9]+'))[0] | float }}"

    - name: Verificar se load está abaixo do limite
      when: (load_average | float) < (load_threshold | float)
      set_fact:
        trace: "{{ trace }} Load average abaixo do limite |"
        status: "OK"
        categoria: "SUCESSO_RETRY"
        mensagem: "Load average está menor do que o alerta. LIMITE: {{ load_threshold }} ATUAL: {{ load_average }}"

    - name: Verificar se load está acima do limite
      when: (load_average | float) >= (load_threshold | float)
      block:

        - name: "[TRACE] Load average acima do permitido"
          set_fact:
            trace: "{{ trace }} Load average acima do permitido |"

        - name: Obter maior processo consumidor de CPU
          ansible.builtin.shell: "ps -eo pid,comm,%cpu,user --sort=-%cpu | awk 'NR==2'"
          register: top_process
          changed_when: false

        - name: Verificar se processo foi retornado com sucesso
          set_fact:
            processo_disponivel: true
          when: top_process.stdout is defined and top_process.stdout | trim != ""

        - name: Extrair variáveis individuais do processo
          when: processo_disponivel
          set_fact:
            processo_pid: "{{ (top_process.stdout | regex_replace(' +', ' ') | split(' '))[0] | default('') }}"
            processo_nome: "{{ (top_process.stdout | regex_replace(' +', ' ') | split(' '))[1] | default('') }}"
            processo_cpu: "{{ (top_process.stdout | regex_replace(' +', ' ') | split(' '))[2] | default('') }}"
            processo_user: "{{ (top_process.stdout | regex_replace(' +', ' ') | split(' '))[3] | default('') }}"

        - name: Obter nome completo do usuário
          when: processo_disponivel and processo_user != ""
          ansible.builtin.shell: "getent passwd {{ processo_user }} | cut -d ':' -f 5"
          register: user_fullname
          changed_when: false

        - name: Definir status NOK e mensagem detalhada
          when: processo_disponivel and processo_nome != "" and processo_user != "" and user_fullname is defined
          set_fact:
            status: "NOK"
            categoria: "RETRY"
            mensagem: >-
              MAIOR PROCESSO CONSUMIDOR DE CPU: {{ processo_nome }},
              CONSUMO: {{ processo_cpu }}%,
              USUÁRIO: {{ processo_user }},
              RESPONSÁVEL: {{ user_fullname.stdout.strip() }},
              LIMITE: {{ load_threshold }},
              ATUAL: {{ load_average }}

        - name: "[FALHA] Nenhum processo retornado pelo ps"
          when: not processo_disponivel
          set_fact:
            status: "NOK"
            categoria: "SCRIPT"
            mensagem: "Erro ao coletar processo mais consumidor de CPU. Nenhum dado retornado."

    - name: Exibir saída final no formato script (multilinha)
      debug:
        msg: |
          STATUS: {{ status }}
          CATEGORIA: {{ categoria }}
          MENSAGEM: {{ mensagem }}
          TRACE: {{ trace }}